<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">              
 
<bean id="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	<property name="driverClass" value="com.microsoft.sqlserver.jdbc.SQLServerDriver"/>
	<property name="jdbcUrl" value="jdbc:sqlserver://localhost:1433;DatabaseName=express"/>
	<property name="user" value="sa"/>
	<property name="password" value="zhbit"/>
	<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
	<property name="initialPoolSize" value="1"/>
	<!--连接池中保留的最小连接数。-->
	<property name="minPoolSize" value="1"/>
	<!--连接池中保留的最大连接数。Default: 15 -->
	<property name="maxPoolSize" value="300"/>
	<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
	<property name="maxIdleTime" value="60"/>
	<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
	<property name="acquireIncrement" value="5"/>
	<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
	<property name="idleConnectionTestPeriod" value="60"/>
</bean>

<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
 	<property name="dataSource" ref="datasource"/>
 	<property name="mappingResources">
    	<list>
      	<value>com/zhbit/expresscompany/domain/notice.hbm.xml</value>
      	<value>com/zhbit/expresscompany/domain/user.hbm.xml</value>
      	<value>com/zhbit/expresscompany/domain/usenders.hbm.xml</value>
    	<value>com/zhbit/expresscompany/domain/urecipients.hbm.xml</value>
    	</list>
    	
 	</property>
 	<property name="hibernateProperties">
 	<props>
 	<prop key="hibernate.dialect">org.hibernate.dialect.SQLServer2008Dialect</prop>
 	<prop key="hibernate.hbm2ddl.auto">update</prop>
 	<prop key="hibernate.show_sql">true</prop>
 	<prop key="hibernate.format_sql">true</prop>
 	<prop key="hibernate.current_session_context_class">
		org.springframework.orm.hibernate4.SpringSessionContext</prop>
 	</props>
 	</property>
</bean> 

	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>

	<!-- tx:advice：定义事务通知，transaction-manager属性用于指定事务管理器 --> 
	<tx:advice id="txAdvice" transaction-manager="txManager">
		  <tx:attributes>
		  	<!-- tx:method为某个或某些（name属性可使用通配符）指定方法的5种事务属性; rollback-for属性用于设置事务回滚的异常，若有多个，则用逗号隔开 -->
		    <tx:method name="get*" read-only="true" />
		    <tx:method name="*" propagation="REQUIRED" timeout="5" read-only="false"/>
		  </tx:attributes>
	</tx:advice>
	
	
	<!--使用基于XML方式配置事务 -->
	<aop:config>
		<!-- aop:pointcut:使用切入点表达式定义切入点 -->
	  	<aop:pointcut id="transactionPointcut" expression="execution(* com.zhbit.expresscompany.service..*.*(..))"/>
	  	<!-- aop:advisor：用于指定哪些Bean应该被通知 -->
	  	<aop:advisor advice-ref="txAdvice" pointcut-ref="transactionPointcut"/>
	</aop:config>
	
	<!-- 辅助 -->
	<bean id="noticeDao" class="com.zhbit.expresscompany.dao.impl.NoticeDaoBean">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="noticeSerive" class="com.zhbit.expresscompany.service.impl.NoticeSeriveBean">
		<property name="noticeDao" ref="noticeDao"/>
	</bean>
	
	<bean id="noticeAction" class="com.zhbit.expresscompany.web.action.NoticeAction" scope="request">
		<property name="serive" ref="noticeSerive"/>
	</bean>
	<!-- 结束 -->
	
	<bean id="userDao" class="com.zhbit.expresscompany.dao.impl.UserDaoBean">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>	
	<bean id="userSerive" class="com.zhbit.expresscompany.service.impl.UserSeriveBean">
		<property name="userDao" ref="userDao"/>
	</bean>
	<bean id="userAction" class="com.zhbit.expresscompany.web.action.UserAction" scope="request">
		<property name="serive" ref="userSerive"/>
	</bean>
	
	
	<bean id="usendersDao" class="com.zhbit.expresscompany.dao.impl.USendersDaoBean">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>		
	<bean id="usendersSerive" class="com.zhbit.expresscompany.service.impl.USendersSeriveBean">
		<property name="usendersDao" ref="usendersDao"/>
	</bean>
	<bean id="usendersAction" class="com.zhbit.expresscompany.web.action.UsendersAction" scope="request">
		<property name="serive" ref="usendersSerive"/>
	</bean>
	

	<bean id="urecipientsDao" class="com.zhbit.expresscompany.dao.impl.URecipientsDaoBean">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>	
	
	<bean id="urecipientsSerive" class="com.zhbit.expresscompany.service.impl.URecipientsSeriveBean">
		<property name="urecipientsDao" ref="urecipientsDao"/>
	</bean>
 		
 
</beans>

